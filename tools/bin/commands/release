#!/bin/bash

# Maven modules which create Docker images
IMAGE_MODULES="ui rest verifier s2i"

release::description() {
    cat - <<EOT
Perform a release

This command performs a release but does *no* automated rollback when something fails.
Please refer to the manual at https://docs.syndesis.io for more details and what needs
to be cleaned up in case of a failure.
EOT
}

release::usage() {
    cat - <<EOT
-n  --dry-run                 Dry run, which performs the whole build but does no tagging, artefact
                              upload or pushing Docker images
    --release-version <ver>   Version to release (e.g. "1.2.1"). This is a mandatory argument.
    --dev-version <version>   Next development version. If not given, set to "<major>.<minor>-SNAPSHOT"
                              as calculated from --release-version (e.g. "1.2-SNAPSHOT")
    --settings <file>         Path to a custom settings.xml to use for the release.
                              This file must contain all the credentials to be used for Sonatype.
                              By default ~/.m2/settings.xml is used.
    --local-maven-repo <dir>  Local dir for holding the local Maven repo cache. If not given, then a new
                              temporary directory will be used (and removed after the release)
    --docker-user <user>      Docker user for Docker Hub
    --docker-password <pwd>   Docker password for Docker Hub
    --product-templates       Create templates for the productised version only and tag
    --no-git-push             Don't push the release tag (and symbolic major.minor tag) at the end
    --log <log-file>          Write full log to <log-file>, only print progress to screen
EOT
}

release::run() {
    source "$(basedir)/commands/util/maven_funcs"

    # Main application directory
    local appdir=$(appdir)

    # Validate release versions
    local release_version=$(readopt --release-version)
    if [ -z "${release_version}" ]; then
        echo "Please specify --release-version"
        exit 1
    fi

    # Get the Syndesis minor version
    local syndesis_tag=$(extract_minor_version $release_version)
    check_error $syndesis_tag

    # Generate product templates only if desired
    if [ $(hasflag --product-templates) ]; then
        do_product_templates $appdir $syndesis_tag "fuse-ignite"
        exit 0
    fi

    # Write to logfile if requestes
    if [ $(readopt --log) ]; then
        local logfile=$(readopt --log)
        touch $logfile
        tail -f $logfile > >(grep ^====) &
        local tail_pid=$!
        trap "kill $tail_pid" EXIT

        exec >>$logfile 2>&1
        sleep 1
    fi

    # Verify that there are no modified file in git repo
    check_git_clean "$appdir"

    # Calculate common maven options
    local maven_opts="$(extract_maven_opts)"

    # Set pom.xml version to the given release_version
    update_pom_versions "$appdir" "$release_version" "$maven_opts"

    # Make a clean install
    mvn_clean_install "$appdir" "$maven_opts"

    # Create templates for the full syndesis version
    generate_templates "$appdir" "$release_version"

    # Stage artefacts to Sonatype
    stage_artefacts "$appdir" "$maven_opts"

    # Build all Docker Images
    docker_login
    create_docker_images "$appdir" "$maven_opts"

    # For a test run, we are done
    if [ $(hasflag --dry-run -n) ]; then
        drop_staging_repo "$appdir"

        echo "==== Dry run finished, nothing has been committed"
        echo "==== Use 'git reset --hard' to cleanup"
        exit 0
    fi

    # ========================================================================
    # Commit, tag, release, push
    # --------------------------

    # Pushing to Docker Hub
    docker_push "$release_version" "$syndesis_tag"

    # Release staging repo
    release_staging_repo "$appdir" "$maven_opts"

    # Git Commit all changed files
    git_commit_files "$appdir" "$release_version"

    # Tag the release version
    echo "==== Tagging version $release_version"
    git tag -f "$release_version"

    # Create template versions for the minor tags (without patchlevels)
    create_templates_for_minor_version "$appdir" "$syndesis_tag"

    # Update files for SNAPSHOT and 'latest version'
    change_to_dev_version "$appdir" "$maven_opts"

    # Push everything (if configured)
    git_push "$release_version" "$syndesis_tag"
}

create_templates_for_minor_version() {
    local appdir=$1
    local syndesis_tag=$2

    generate_templates $appdir $syndesis_tag

    echo "==== Git commit for templates $syndesis_tag"
    cd $appdir
    git_commit ^deploy/ "Update OpenShift templates for Syndesis $syndesis_tag"

    echo "==== Git tag $syndesis_tag"
    git tag -f $syndesis_tag
}

# ===================================================================================================
# Prep actions:

check_git_clean() {
    local appdir=$1

    cd $appdir
    echo "==== Checking for clean Git Repo"
    set +e
    git diff-index --quiet HEAD --
    local git_uncommitted=$?
    set -e
    if [ $git_uncommitted != 0 ]; then
       echo "Untracked or changed files exist. Please run release on a clean repo"
       git status
       exit 1
    fi
}

update_pom_versions() {
    local appdir="$1"
    local version="$2"
    local maven_opts="$3"

    cd $appdir
    echo "==== Updating pom.xml versions to $version"
    ./mvnw ${maven_opts} versions:set -DnewVersion=$version -DprocessAllModules=true -DgenerateBackupPoms=false
}

mvn_clean_install() {
    local appdir="$1"
    local maven_opts="$2"

    echo "==== Running 'mvn clean install'"
    cd $appdir
    ./mvnw ${maven_opts} clean install
}

generate_templates() {
    local appdir="$1"
    local syndesis_tag="$2"

    echo "==== Creating templates for $syndesis_tag"
    cd $appdir/deploy/generator
    sh run.sh --syndesis-tag="$syndesis_tag"
}

stage_artefacts() {
    local appdir="$1"
    local maven_opts="$2"

    echo "==== Staging Maven artefacts to Sonatype"
    cd $appdir
    ./mvnw ${maven_opts} -Prelease clean deploy -DstagingDescription="Staging Syndesis for $(readopt --release-version)"
}

docker_login() {
    if [ -n "$(readopt --docker-user)" ] && [ -n "$(readopt --docker-user)" ]; then
        echo "==== Login to Docker Hub"
        docker login -u "$(readopt --docker-user)" -p "$(readopt --docker-user)"
    fi
}

create_docker_images() {
    local appdir=$1
    local maven_opts="$2"

    echo "==== Creating Docker images"
    cd $appdir
    for module in $IMAGE_MODULES; do
        # -Pimage binds to fabric8:build
        ./mvnw ${maven_opts} -Prelease,image,flash -Dfabric8.mode=kubernetes -f $module package
    done
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Commit, push, release actions

docker_push() {
    local release_version=$1
    local syndesis_tag=$2

    echo "==== Pushing to Docker Hub"
    for module in $IMAGE_MODULES; do
        local image="syndesis/syndesis-$module"
        docker tag "$image:$release_version" "$image:$syndesis_tag"
        docker push "$image:$release_version"
        docker push "$image:$syndesis_tag"
    done
}

release_staging_repo() {
    local appdir="$1"
    local maven_opts="$2"

    echo "==== Releasing Sonatype staging repo"
    cd $appdir
    ./mvnw ${maven_opts} -Prelease nexus-staging:release -DstagingDescription="Releasing $(readopt --release-version)"
}

git_commit_files() {
    local appdir=$1
    local version=$2

    echo "==== Committing files to local git"
    cd $appdir
    git_commit pom.xml "Update pom.xmls to $version"
    git_commit ^connectors/ "Update generated connector files"
    git_commit ^deploy/ "Update OpenShift templates for Syndesis $version"
}

change_to_dev_version() {
    local appdir=$1
    local maven_opts="$2"

    # Calculate hte next development version
    local dev_version=$(readopt --dev-version)
    if [ -z "${dev_version}" ]; then
        dev_version=$(calc_dev_version $release_version)
        check_error $dev_version
    fi

    echo "==== Updating pom.xmls to snapshot version"
    cd $appdir
    ./mvnw ${maven_opts} versions:set -DnewVersion=$dev_version -DprocessAllModules=true -DgenerateBackupPoms=false

    echo "==== Updating OpenShift templates back to 'latest'"
    cd $appdir/deploy/generator
    sh run.sh --syndesis-tag="latest"

    echo "==== Committing files for current snapshot"
    cd $appdir
    git_commit pom.xml "Setting version $dev_version in pom.xml files"
    git_commit ^deploy/ "Update OpenShift templates to latest images"
}

git_push() {
    local $release_version=${1:-}
    local $syndesis_tag=${2:-}
    if [ ! $(hasflag --no-git-push) ] && [ ! $(hasflag --dry-run -n) ]; then
        echo "==== Pushing to GitHub"
        if [ -n "$release_version" ]; then
            echo "* Pushing $release_version"
            git push $release_version
        fi
        if [ -n "$syndesis_tag" ]; then
            echo "* Pushing symbolic tag $syndesis_tag"
            git push -f $syndesis_tag
        fi
    fi
}

# =======================================================================
# Side actions

do_product_templates() {
  local appdir=$1
  local syndesis_tag=$2
  local tag_prefix=${4:-fuse-ignite}

  cd $appdir/deploy/generator

  echo "==== Creating product templates for $syndesis_tag"
  sh run.sh --product --syndesis-tag="$syndesis_tag"

  echo "==== Committing"
  cd $appdir
  git_commit ^deploy/ "Update OpenShift templates for Syndesis $syndesis_tag"

  echo "=== Tagging"
  git tag -f "${tag_prefix}-${syndesis_tag}"

  echo "=== Reverting template versions back to 'latest'"
  cd $appdir/deploy/generator
  sh run.sh --syndesis-tag="latest"

  echo "==== Committing"
  cd $appdir
  git_commit ^deploy/ "Update OpenShift to latest images"

  git_push
}

drop_staging_repo() {
    local appdir="$1"

    echo "==== Dropping Sonatype staging repo"
    cd $appdir
    ./mvnw nexus-staging:drop -Prelease -DstagingDescription="Dropping repo"
}

# =======================================================================
# Helper

extract_maven_opts() {
    # Temporary local repository to guarantee a clean build
    local local_maven_repo=$(readopt --local-maven-repo)
    if [ -z "$local_maven_repo" ]; then
        local_maven_repo=$(mktemp -d 2>/dev/null || mktemp -d -t 'maven_repo')
        trap "echo 'Removing temp maven repo $local_maven_repo' && rm -rf $local_maven_repo" "EXIT"
    fi
    local maven_opts="-Dmaven.repo.local=$local_maven_repo --batch-mode"

    local settings_xml=$(readopt --settings-xml --settings)
    if [ -n "${settings_xml}" ]; then
        maven_opts="$maven_opts -s $settings_xml"
    fi

    echo $maven_opts
}

git_commit() {
    local pattern="$1"
    local message="$2"

    local release_version=$(readopt --release-version)
    if [ ! $(hasflag --dry-run -n) ]; then
        git ls-files --modified | grep $pattern | xargs git commit -m "[$release_version]: $message"
    fi
}

calc_dev_version() {
    local release_version=$1
    local minor_version=$(extract_minor_version $release_version)
    check_error $minor_version
    echo "${minor_version}-SNAPSHOT"
}

extract_minor_version() {
    local version=$1
    local minor_version=$(echo $version | sed 's/^\([0-9]*\.[0-9]*\)\.[0-9]*\(-.*\)*$/\1/')
    if [ "$minor_version" = "$version" ]; then
        echo "ERROR: Cannot extract minor version from $version"
        return
    fi
    echo $minor_version
}
